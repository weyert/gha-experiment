name: Experiment

on:
  push:
  pull_request:

defaults:
  run:
    shell: sh

jobs:
  test:
    name: Sanity Test
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
      - uses: "actions/checkout@v4"
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - uses: pnpm/action-setup@v2.4.0
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Fetch the database backup
        run: |
          mkdir -p ./scripts/localstack/backups/
          touch ./scripts/localstack/backups/cloud-sql-backup.sql
          cat <<EOF > ./scripts/localstack/backups/cloud-sql-backup.sql
          CREATE TABLE new(id INT,name VARCHAR);
          INSERT INTO new(id,name)values(1,'Travis');
          EOF
          cat ./scripts/localstack/backups/cloud-sql-backup.sql
          ls -la ./scripts/localstack/backups

      - name: Create development environment
        uses: ./.github/actions/create-development-env
        with:
          compose-file: "./scripts/localstack/docker-compose.yml"
          database_file: ./scripts/localstack/backups/cloud-sql-backup.sql
          cwd: "${{ github.workspace }}"
          down-flags: "--volumes"

      # - name: Generate developer certificates
      #   run: |
      #     echo "::group::Prepare"
      #     sudo apt update
      #     sudo apt install -y libnss3-tools
      #     wget https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64
      #     mv mkcert-v1.4.3-linux-amd64 ./tools/mkcert
      #     chmod +x ./tools/mkcert
      #     ./tools/mkcert --version
      #     echo "::endgroup::"
      #     echo "::group::Create certificates"
      #     CAROOT=./ssl ./tools/mkcert -key-file ./ssl/localhost-key.pem -cert-file ./ssl/localhost.pem "*.example.com" example.test localhost 127.0.0.1 ::1
      #     CAROOT=./ssl ./tools/mkcert -install
      #     echo "::endgroup::"
      #     echo "::group::Generated certificates"
      #     ls -la ssl
      #     sudo update-ca-certificates --fresh
      #     echo "::endgroup::"
